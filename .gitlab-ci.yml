stages:
  - setup
  - static_code_analysis
  - build_and_test_phase_1
  - build_and_test_phase_2
  - publish

variables:
  DATA_REPLAY_TAG: data-cache-storage

  # uses registry.gitlab.syncad.com/hive/haf/ci-base-image:ubuntu22.04-12
  BUILDER_IMAGE_TAG: "@sha256:50d08c0e525c6252c772a4443e0b6d445008ac6a6479e8e7028adace99d42509"
  CI_COMMON_JOB_VERSION: "a3e97d90268154fae7933ea98e50e3c1c7c72d43"
  DOCKER_BUILDER_TAG: "$CI_COMMON_JOB_VERSION"
  DOCKER_DIND_TAG: "$CI_COMMON_JOB_VERSION"
  IMAGE_REMOVER_TAG: "$CI_COMMON_JOB_VERSION"
  JQ_IMAGE_TAG: "$CI_COMMON_JOB_VERSION"
  
  PYTEST_NUMBER_OF_PROCESSES: 8
  CTEST_NUMBER_OF_JOBS: 4
  SETUP_SCRIPTS_PATH: "$CI_PROJECT_DIR/scripts"
  TEST_TOOLS_NODE_DEFAULT_WAIT_FOR_LIVE_TIMEOUT: 60

  GIT_DEPTH: 20
  GIT_SUBMODULE_STRATEGY: recursive
  FF_ENABLE_JOB_CLEANUP: 1
  GIT_STRATEGY: clone
  CI_DEBUG_SERVICES: "true"
  
include:
  - local: /scripts/ci-helpers/templates.gitlab-ci.yml

######## Templates ########

# Moved to scripts/ci-helpers/templates.gitlab-ci.yml

.hfm_functional_tests:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_hfm_functional_tests.sh
  artifacts:
    paths:
      - "**/*.log"
  interruptible: true
  tags:
    - public-runner-docker
    - hived

.replay_step:
  extends: 
    - .job-defaults
    - .hfm-only-service
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  variables:
    PATTERNS_PATH: "" #Should be overriden in derived jobs
    RO_BLOCK_LOG_DIRECTORY: "/blockchain/block_log_5m/"
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-testnet-binaries"
    HIVED_PATH: "$CI_PROJECT_DIR/haf-binaries/hived"
    DB_NAME: haf_block_log
    DB_ADMIN: "haf_admin"
    POSTGRES_HOST: "hfm-only-instance"
    POSTGRES_PORT: "5432"
    DB_URL: "postgresql://haf_admin@hfm-only-instance:5432/haf_block_log"
    REPLAY: "--force-replay"
  before_script:
    - !reference [.pytest_based, before_script]
    - ls -lath $CI_PROJECT_DIR
    # replay
    - |
      echo -e "\e[0Ksection_start:$(date +%s):replay[collapsed=true]\r\e[0KExecuting replay..."
      test -n "$PATTERNS_PATH"
      mkdir -vp "${PATTERNS_PATH}/blockchain"
      cp "${RO_BLOCK_LOG_DIRECTORY}/block_log" "${PATTERNS_PATH}/blockchain/"
      cd $CI_PROJECT_DIR/tests/integration/replay
      $HIVED_PATH --data-dir $PATTERNS_PATH $REPLAY --exit-before-sync --psql-url $DB_URL 2>&1 | tee -i node_logs.log
      echo -e "\e[0Ksection_end:$(date +%s):replay\r\e[0K"
  script:
    - pytest --junitxml report.xml
  artifacts:
    paths:
    - "**/node_logs.log"
    - "**/node_logs1.log"
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    - "**/*.out.csv"
    reports:
      junit: tests/integration/replay/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker
    - hived-for-tests

######## End templates ########

######## Setup ########

determine-runner-tag:
  extends: .determine-runner-tag-template
  stage: setup

######## End setup ########

######## Static code analysis ########

verify_poetry_lock_sanity:
  extends: .verify_poetry_lock_sanity_template
  stage: static_code_analysis
  variables:
    PYPROJECT_DIR: "$CI_PROJECT_DIR/tests/integration/haf-local-tools"

  tags:
    - public-runner-docker

######## End static code analysis ########

######## Build and test phase 1 ########

haf_image_build:
  extends: .haf_image_build
  variables:
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-binaries"
    HIVE_NETWORK_TYPE: mainnet

haf_image_build_testnet:
  extends: .haf_image_build
  variables:
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-testnet-binaries"
    HIVE_NETWORK_TYPE: testnet

prepare_haf_image_dotenv:
  extends: .rewrite-dotenv-and-extract-binaries
  stage: build_and_test_phase_1
  variables:
    DOT_ENV_FILENAME: "mainnet_dotenv"
    DOTENV_VAR_PREFIX: "MAINNET_HAF"
    DOTENV_VAR_NAME: "HAF"
  needs:
    - job: haf_image_build

######## End build and test phase 1 ########

######## Build and test phase 2 ########

hfm_functional_tests:
  extends: .hfm_functional_tests
  needs:
    - job: haf_image_build
      artifacts: true

hfm_functional_tests_testnet:
  extends: .hfm_functional_tests
  needs:
    - job: haf_image_build_testnet
      artifacts: true

dynamic-tag-pipeline-trigger:
  extends: .dynamic-tag-pipeline-trigger-template
  stage: build_and_test_phase_2
  needs:
    - job: determine-runner-tag
    - job: prepare_haf_image_dotenv
      artifacts: true
  trigger:
    strategy: depend
    forward:
      yaml_variables: true
      pipeline_variables: true
    include:
      - local: scripts/ci-helpers/dynamic-tag-pipeline.gitlab-ci.yml

dynamic-pipeline-details-collector:
  extends: .dynamic-pipeline-details-collector-template
  stage: build_and_test_phase_2
  needs:
    - job: dynamic-tag-pipeline-trigger
  tags:
    - public-runner-docker

dynamic-pipeline-test-results-collector:
  extends: .dynamic-pipeline-test-results-collector-template
  stage: build_and_test_phase_2
  needs:
    - job: dynamic-pipeline-details-collector
  parallel:
    matrix:
      - CHILD_PIPELINE_JOB: [ "haf_system_tests_mirrornet" ]
  tags:
    - public-runner-docker

replay_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/no_filter"

replay_with_haf_from_4_9m:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns_4_9m/no_filter"

replay_accounts_filtered_with_haf_from_4_9m:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns_4_9m/accounts_filtered"

replay_accounts_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_filtered"

replay_accounts_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_operations_filtered"

replay_virtual_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/virtual_operations_filtered"

replay_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/operations_filtered"

replay_body_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/body_operations_filtered"

replay_accounts_body_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_body_operations_filtered"

block_api_tests:
  extends: .replay_step
  image: $CI_REGISTRY_IMAGE/ci-base-image:ubuntu22.04-8-jmeter
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    FF_NETWORK_PER_BUILD: 1
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_body_operations_filtered"
    BENCHMARK_DIR: "$CI_PROJECT_DIR/hive/tests/python/hive-local-tools/tests_api/benchmarks"
  script:
    # setup
    - |
      echo -e "\e[0Ksection_start:$(date +%s):blocks_api_test_setup[collapsed=true]\r\e[0KSetting up blocks api tests..."
      psql $DB_URL -c "CREATE ROLE bench LOGIN PASSWORD 'mark' INHERIT IN ROLE hived_group;"
      export BENCHMARK_DB_URL="postgresql://bench:mark@hfm-only-instance:5432/$DB_NAME"
      echo -e "\e[0Ksection_end:$(date +%s):blocks_api_test_setup\r\e[0K"

    # run pattern tests
    - |
      echo -e "\e[0Ksection_start:$(date +%s):blocks_api_test[collapsed=true]\r\e[0KRunning blocks api tests..."
      cd "$BENCHMARK_DIR"
      python3 benchmark.py --loops 200 --threads 5 -n blocks_api -p 5432 -c perf_5M_light.csv --skip-version-check -d wdir --postgres $BENCHMARK_DB_URL --call-style postgres 2>&1 | tee -i $CI_PROJECT_DIR/python_benchmark.log
      echo -e "\e[0Ksection_end:$(date +%s):blocks_api_test\r\e[0K"

    # generate JUNIT report file
    - |
      echo -e "\e[0Ksection_start:$(date +%s):report[collapsed=true]\r\e[0KGenerating JUnit report..."
      m2u --input "$BENCHMARK_DIR/wdir/raw_jmeter_report.xml" --output $CI_PROJECT_DIR/report.junit
      echo -e "\e[0Ksection_end:$(date +%s):report\r\e[0K"
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    reports:
      junit: $CI_PROJECT_DIR/report.junit
    paths:
      - $BENCHMARK_DIR/wdir
      - $CI_PROJECT_DIR/python_benchmark.log
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker
    - hived-for-tests

replay_with_update:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_replay_with_update.sh
  artifacts:
    paths:
      - "replay_with_update.log"
      - "node_logs.log"
      - "node_logs1.log"
  tags:
    - public-runner-docker
    - hived-for-tests

replay_with_keyauths:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/tests/integration/state_provider/run_replay_with_keyauth.sh
  artifacts:
    paths:
      - "replay_with_keyauths.log"
      - "node_logs.log"
      - "node_logs1.log"
  tags:
    - public-runner-docker
    - hived-for-tests

replay_with_json_metadata:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/tests/integration/state_provider/run_replay_with_json_metadata.sh
  artifacts:
    paths:
      - "replay_with_json_metadata.log"
      - "node_logs.log"
      - "node_logs1.log"
  tags:
    - public-runner-docker
    - hived-for-tests

replay_with_app:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_live_replay_with_app.sh
  artifacts:
    paths:
      - "replay_with_app.log"
      - "node_logs.log"
      - "node_logs1.log"
  tags:
    - public-runner-docker
    - hived-for-tests

# What is the purpose of this job?
# It does not run any replays - only some basic Docker commands.
double_haf_replay_tests:
  extends: .docker_image_builder_job
  stage: build_and_test_phase_2
  variables:
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/docker/config_5M.ini"
  needs:
    - job: haf_image_build
      artifacts: true
  script:
    - docker container ps -a
    - docker images
    - docker context ls
  tags:
    - public-runner-docker
    - hived-for-tests

haf_system_tests:
  extends: .job-defaults
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build_testnet
      artifacts: true
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_haf_system_tests.sh
  artifacts:
    paths:
    - "haf_system_tests.log"
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    exclude:
    - "**/generated_during_*/**/block_log"
    - "**/generated_during_*/**/block_log.artifacts"
    - "**/generated_during_*/**/shared_memory.bin"
    - "**/generated_during_*/**/*.sst"
    reports:
      junit: tests/integration/system/haf/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker

applications_system_tests:
  extends: .job-defaults
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build_testnet
      artifacts: true
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_application_system_tests.sh
  artifacts:
    paths:
    - "applications_system_tests.log"
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    exclude:
    - "**/generated_during_*/**/block_log"
    - "**/generated_during_*/**/block_log.artifacts"
    - "**/generated_during_*/**/shared_memory.bin"
    - "**/generated_during_*/**/*.sst"
    reports:
      junit: tests/integration/system/applications/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker

replay_restarts_with_app:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_live_replay_with_restarts_and_app.sh
  artifacts:
    paths:
      - "node_logs.log"
  tags:
    - public-runner-docker
    - hived-for-tests

replay_with_restart:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_replay_with_breaks.sh
  artifacts:
    paths:
      - "node_logs.log"
  tags:
    - public-runner-docker
    - hived-for-tests

update_with_wrong_table_schema:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_update_with_wrong_table_schema.sh
  artifacts:
    paths:
      - "update_with_wrong_table_schema.log"
      - "node_logs.log"
  tags:
    - public-runner-docker
    - hived-for-tests

op_body_filter_tests:
  extends: .job-defaults
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build_testnet
      artifacts: true
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_op_body_filter_tests.sh
  artifacts:
    paths:
    - "op_body_filter_tests.log"
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    exclude:
    - "**/generated_during_*/**/block_log"
    - "**/generated_during_*/**/block_log.artifacts"
    - "**/generated_during_*/**/*.sst"
    reports:
      junit: tests/integration/tools/op_body_filter/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker

######## End build and test phase 2 ########

######## Publish ########

build_and_publish_image:
  stage: publish
  extends: .publish_docker_image_template
  before_script:
    - !reference [.publish_docker_image_template, before_script]
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
    - hived-for-tests

######## End publish ########
