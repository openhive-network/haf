stages:
  - build_and_test_phase_1
  - build_and_test_phase_2
  - docker_build
  - deploy
  - cleanup
  - publish

variables:
  PYTEST_NUMBER_OF_PROCESSES: 8
  CTEST_NUMBER_OF_JOBS: 4
  GIT_DEPTH: 20
  GIT_SUBMODULE_STRATEGY: recursive
  FF_ENABLE_JOB_CLEANUP: 1
  GIT_STRATEGY: clone
  # uses registry.gitlab.syncad.com/hive/haf/ci-base-image:ubuntu22.04-8
  BUILDER_IMAGE_TAG: "@sha256:834e666ee84fb78d66a695b274b87f75535f96fda98e51726a23eab60812813b"
  CI_DEBUG_SERVICES: "true"
  SETUP_SCRIPTS_PATH: "$CI_PROJECT_DIR/scripts"
  TEST_TOOLS_NODE_DEFAULT_WAIT_FOR_LIVE_TIMEOUT: 60
  DATA_CACHE_HAF_PREFIX: "/cache/replay_data_haf"
  BLOCK_LOG_SOURCE_DIR_5M: /blockchain/block_log_5m
  SNAPSHOTS_PATH: /cache/snapshots_pipeline_${CI_PIPELINE_ID}
  BLOCK_LOG_SOURCE_DIR_MIRRORNET_5M: /cache/block_log_5m_mirrornet

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - local: '/scripts/ci-helpers/prepare_data_image_job.yml'
  - project: 'hive/common-ci-configuration'
    ref: 7ea99b10bbf0f9b1fbb88f52a78ead4c82f15d75
    file:
    - '/templates/python_projects.gitlab-ci.yml'

.haf_image_build:
  extends: .prepare_haf_image
  stage: build_and_test_phase_1
  tags:
    - public-runner-docker
    - hived-for-tests

haf_image_build:
  extends: .haf_image_build
  variables:
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-binaries"
    HIVE_NETWORK_TYPE: mainnet


.haf-service: &haf-service
  name: $HAF_IMAGE_NAME
  alias: haf-instance
  variables:
    # Allow access from any network to eliminate CI IP addressing problems when hfm runs as service
    PG_ACCESS: |
                "host    all              haf_admin        0.0.0.0/0    trust"

    DATA_SOURCE: "${DATA_CACHE_HAF_PREFIX}_${HAF_COMMIT}"
    LOG_FILE: $CI_JOB_NAME.log
  command: ["--replay-blockchain", "--stop-replay-at-block=5000000"]

.hfm-only-service: &hfm-only-service
  name: $HAF_IMAGE_NAME
  alias: hfm-only-instance
  variables:
    # Allow access from any network to eliminate CI IP addressing problems when hfm runs as service
    PG_ACCESS: |
                "host    all              haf_admin        0.0.0.0/0    trust"
                "host    all              test_app_owner   0.0.0.0/0    trust"
                "host    all              hived            0.0.0.0/0    trust"
                "host    all              all              0.0.0.0/0    scram-sha-256"
  command: [ "--execute-maintenance-script=${HAF_SOURCE_DIR}/scripts/maintenance-scripts/sleep_infinity.sh" ]

.hfm_functional_tests:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_1
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_hfm_functional_tests.sh
  artifacts:
    paths:
      - "**/*.log"
  interruptible: true
  tags:
    - public-runner-docker
    - hived


.pytest_based:
  extends: .job-defaults
  before_script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):python_venv[collapsed=true]\r\e[0KCreating Python virtual environment..."
      python3 -m venv --system-site-packages venv/
      . venv/bin/activate
      (cd $CI_PROJECT_DIR/tests/integration/haf-local-tools && poetry install)
      echo -e "\e[0Ksection_end:$(date +%s):python_venv\r\e[0K"

.replay_step:
  extends: .job-defaults
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  services:
    - *hfm-only-service
  variables:
    PATTERNS_PATH: "" #Should be overriden in derived jobs
    RO_BLOCK_LOG_DIRECTORY: "/blockchain/block_log_5m/"
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-testnet-binaries"
    HIVED_PATH: "$CI_PROJECT_DIR/haf-binaries/hived"
    DB_NAME: haf_block_log
    DB_ADMIN: "haf_admin"
    POSTGRES_HOST: "hfm-only-instance"
    POSTGRES_PORT: "5432"
    DB_URL: "postgresql://haf_admin@hfm-only-instance:5432/haf_block_log"
    REPLAY: "--force-replay"
  before_script:
    - !reference [.pytest_based, before_script]
    - ls -lath $CI_PROJECT_DIR
    # replay
    - |
      echo -e "\e[0Ksection_start:$(date +%s):replay[collapsed=true]\r\e[0KExecuting replay..."
      test -n "$PATTERNS_PATH"
      mkdir -vp "${PATTERNS_PATH}/blockchain"
      cp "${RO_BLOCK_LOG_DIRECTORY}/block_log" "${PATTERNS_PATH}/blockchain/"
      cd $CI_PROJECT_DIR/tests/integration/replay
      $HIVED_PATH --data-dir $PATTERNS_PATH $REPLAY --exit-before-sync --psql-url $DB_URL 2>&1 | tee -i node_logs.log
      echo -e "\e[0Ksection_end:$(date +%s):replay\r\e[0K"
  script:
    - pytest --junitxml report.xml
  artifacts:
    paths:
    - "**/node_logs.log"
    - "**/node_logs1.log"
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    - "**/*.out.csv"
    reports:
      junit: tests/integration/replay/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker
    - hived-for-tests


replay_restarts_with_app:
  extends: .job-defaults
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [""]
  stage: build_and_test_phase_2
  needs:
    - job: haf_image_build
      artifacts: true
  variables:
    PG_ACCESS: "host    all              all        127.0.0.1/32    trust"
  script:
    - /home/haf_admin/docker_entrypoint.sh --execute-maintenance-script=$CI_PROJECT_DIR/scripts/maintenance-scripts/run_live_replay_with_restarts_and_app.sh
  artifacts:
    paths:
      - "node_logs.log"
  tags:
    - public-runner-docker
    - hived-for-tests



cleanup_haf_cache_manual:
  extends: .cleanup_cache_manual
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "/cache/replay_data_haf_*"
  tags:
    - data-cache-storage

cleanup_haf_snapshot_from_cache:
  extends: .cleanup_cache_manual
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "/cache/snapshots_pipeline_*"
  tags:
    - data-cache-storage

build_and_publish_image:
  stage: publish
  extends: .publish_docker_image_template
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker


